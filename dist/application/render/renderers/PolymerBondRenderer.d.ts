import { BaseRenderer } from './BaseRenderer';
import { PolymerBond } from "../../../domain/entities/PolymerBond";
import { D3SvgElementSelection } from "../types";
export declare class PolymerBondRenderer extends BaseRenderer {
    polymerBond: PolymerBond;
    private editorEvents;
    private selectionElement;
    private path;
    private previousStateOfIsMonomersOnSameHorisontalLine;
    constructor(polymerBond: PolymerBond);
    get attachmentPointsForSnakeBond(): string[];
    private isSnakeBondAvailableForMonomer;
    get isSnake(): boolean;
    get rootBBox(): DOMRect | undefined;
    get width(): number;
    get height(): number;
    private get scaledPosition();
    moveSelection(): void;
    appendBond(rootElement: any): D3SvgElementSelection<SVGElement, this> | undefined;
    appendSnakeBond(rootElement: any): D3SvgElementSelection<SVGElement, this> | undefined;
    private getMonomerWidth;
    private getMonomerHeight;
    isMonomersOnSameHorizontalLine(): boolean;
    private updateSnakeBondPath;
    private isSecondMonomerTopRight;
    private isSecondMonomerBottomRight;
    private isSecondMonomerBottomLeft;
    private isSecondMonomerTopLeft;
    private isSecondMonomerLeft;
    private addLineFromTopToRight;
    private addLineFromLeftToTop;
    private addLineFromBottomToRight;
    private addLineFromLeftToBottom;
    private addLineFromTopToLeft;
    private addLineFromRightToUp;
    private addLineFromRightToBottom;
    private addLine;
    private addRandomLine;
    appendBondGraph(rootElement: any): D3SvgElementSelection<SVGElement, this> | undefined;
    private appendRootElement;
    show(): void;
    drawSelection(): void;
    moveEnd(): void;
    private moveSnakeBondEnd;
    private moveGraphBondEnd;
    moveStart(): void;
    private moveSnakeBondStart;
    private moveGraphBondStart;
    protected appendHoverAreaElement(): void;
    appendHover(): void;
    removeHover(): D3SvgElementSelection<SVGGElement | SVGLineElement, void>;
}
