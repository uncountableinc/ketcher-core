import { D3SvgElementSelection } from "../../types";
import { Vec2 } from "../../../../domain/entities";
import { SubChainNode } from "../../../../domain/entities/monomer-chains/types";
import { BaseSequenceRenderer } from "./BaseSequenceRenderer";
import { BaseSubChain } from "../../../../domain/entities/monomer-chains/BaseSubChain";
export declare abstract class BaseSequenceItemRenderer extends BaseSequenceRenderer {
    node: SubChainNode;
    private firstNodeInChainPosition;
    private monomerIndexInChain;
    private isLastMonomerInChain;
    private subChain;
    private _isEditingSymbol;
    monomerSize: {
        width: number;
        height: number;
    };
    scaledMonomerPosition: Vec2;
    private editorEvents;
    textElement?: D3SvgElementSelection<SVGTextElement, void>;
    counterElement?: D3SvgElementSelection<SVGTextElement, void>;
    private selectionRectangle?;
    private selectionBorder?;
    spacerElement?: D3SvgElementSelection<SVGGElement, void>;
    backgroundElement?: D3SvgElementSelection<SVGRectElement, void>;
    constructor(node: SubChainNode, firstNodeInChainPosition: Vec2, monomerIndexInChain: number, isLastMonomerInChain: boolean, subChain: BaseSubChain, _isEditingSymbol: boolean, monomerSize: {
        width: number;
        height: number;
    }, scaledMonomerPosition: Vec2);
    abstract get symbolToDisplay(): string;
    get isEditingSymbol(): boolean;
    set isEditingSymbol(isEditingSymbol: boolean);
    protected appendHover(): D3SvgElementSelection<SVGUseElement, void> | void;
    protected appendHoverAreaElement(): void;
    moveSelection(): void;
    get currentSubChain(): BaseSubChain;
    get scaledMonomerPositionForSequence(): Vec2;
    get center(): Vec2;
    private get isSequenceEditModeTurnedOn();
    private appendRootElement;
    private appendBackgroundElement;
    private appendSpacerElement;
    private get nthSeparationInRow();
    private get symbolsInRow();
    private appendCounterElement;
    private get needDisplayCounter();
    private get isBeginningOfChain();
    appendCaretElement(): void;
    private drawHover;
    protected removeHover(): void;
    private appendChainStartArrow;
    show(): void;
    drawSelection(): void;
    appendSelection(): void;
    removeSelection(): void;
    private raiseElement;
    remove(): void;
    setEnumeration(): void;
    redrawEnumeration(): void;
    redrawAttachmentPoints(): void;
    redrawAttachmentPointsCoordinates(): void;
    get enumeration(): null;
    hoverAttachmenPoint(): void;
    updateAttachmentPoints(): void;
    private appendEvents;
}
